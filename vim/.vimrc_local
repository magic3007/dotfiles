" Comments in Vimscript start with a `"`.

" ==================== [Setting] =======================

" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup messages.
set shortmess+=I

" Show line numbers
set number


" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
" set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch


" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse+=a
set selection=exclusive
set selectmode=mouse,key

" Open new windows to right and bottom, which feels
" more natural than Vim's defualt.
set splitbelow
set splitright

" 历史记录数
set history=1000

"禁止生成临时文件
set nobackup
set noswapfile

" 打开状态栏标尺
set ruler                   

" 突出显示当前行
set cursorline              
hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white guibg=darkred guifg=white
hi CursorLine   cterm=NONE ctermbg=darkgrey guibg=darkgrey

" highlight all matches 搜索逐字符高亮
set hlsearch
set incsearch

" match brackets 
set showmatch

" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1


" maximum number of tabs 
set tabpagemax=100

" set tab and space options 
set tabstop=2 shiftwidth=2 expandtab

" 共享剪贴板  
set clipboard+=unnamed 

" 在处理未保存或只读文件的时候，弹出确认
set confirm

" always keep status bar on 
set laststatus=2
" ==================== [Keymap] =======================
  
" Unbind some useless/annoying default key bindings.
" 'Q' in normal mode enters Ex mode. You almost never want this.
nmap Q <Nop> 

" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" complete chars 
:inoremap .. ->
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {}<ESC>i
":inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

" ==================== [Plugins] =======================

if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" Also add Glaive, which is used to configure codefmt's maktaba flags. See
" `:help :Glaive` for usage.
Plug 'google/vim-glaive'
""augroup autoformat_settings
""  autocmd FileType bzl AutoFormatBuffer buildifier
""  autocmd FileType c,cpp,proto,javascript AutoFormatBuffer clang-format
""  autocmd FileType dart AutoFormatBuffer dartfmt
""  autocmd FileType go AutoFormatBuffer gofmt
""  autocmd FileType gn AutoFormatBuffer gn
""  autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
""  autocmd FileType java AutoFormatBuffer google-java-format
""  autocmd FileType python AutoFormatBuffer yapf
""  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
""  autocmd FileType rust AutoFormatBuffer rustfmt
""  autocmd FileType vue AutoFormatBuffer prettier
""augroup END

" code completion 
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}

" automatic add headers 
Plug 'alpertuna/vim-header'

call plug#end()

" for codefmt
call glaive#Install()
" set to google style 
Glaive codefmt clang_format_style=google

" for vim-header 
" https://github.com/alpertuna/vim-header
let g:header_field_author = 'Jing Mai'
let g:header_field_author_email = 'magic3007@pku.edu.cn'
" toggle automatic add header 
let g:header_auto_add_header = 0
let g:header_field_timestamp_format = '%m.%d.%Y'
" useful commands 
" AddHeader, AddMinHeader, AddMITLicense, AddApacheLicense, 

